import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class FastIntersectionBin {
    public static void main(String[] args) {
        int[] a = {1,5,4,9,0,3,6};
        int[] b = {6,4,0,2,7,8,11};

        System.out.println(intersection(a,b).toString());



    }

    public static List<Integer> intersection(int[] a, int[] b){
        ArrayList<Integer> result = new ArrayList<>();
        sort(a, 0, a.length-1);
        sort(b, 0, b.length-1);

        for(int x : a){
            int idx = binarySeach(b,x);
            if(idx != -1){
                result.add(x);
            }
        }

        return result;

    }
    public static int binarySeach(int[] arr, int x){

        int low = 0;
        int high = arr.length-1;
        sort(arr, low, high);
        while(low <= high){
            int mid = (high-low) /2 + low;
            if(arr[mid] == x){
                return mid;
            } else if(arr[mid] > x){
                high = mid-1;
            } else if(arr[mid] < x){
                low = mid+1;
            }
        }

        return -1;
    }

    public static void sort(int[] arr, int low, int high){

        if(low > high){
            return;
        }

        int part = partition(arr, low, high);
        sort(arr, low, part-1);
        sort(arr,part+1, high);
    }

    public static int partition(int[] arr, int low, int high){
        int pivot = arr[low];
        int j = low;
        for(int i = low; i < arr.length; i++){
            if(arr[i] < pivot){
                j++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        int temp = arr[j];
        arr[j] = arr[low];
        arr[low] = temp;

        return j;


    }
}
