Problem Introduction
You are organizing an online lottery. To participate, a person bets on a single
integer. You then draw several ranges of consecutive integers at random.
A participant’s payoff then is proportional to the number of ranges that
contain the participant’s number minus the number of ranges that does not
contain it. You need an efficient algorithm for computing the payoffs for all
participants. A naive way to do this is to simply scan, for all participants, the
list of all ranges. However, you lottery is very popular: you have thousands
of participants and thousands of ranges. For this reason, you cannot afford
a slow naive algorithm

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class OrganizingALottery {
    public static void main(String[] args) {
        FastScanner scanner = new FastScanner(System.in);
        int n, m;
        n = scanner.nextInt();
        m = scanner.nextInt();
        int[] starts = new int[n];
        int[] ends = new int[n];
        int[] points = new int[m];
        int[][] segs = new int[n][2];
        for(int i = 0; i < n; i++){
            starts[i] = scanner.nextInt();
            ends[i] = scanner.nextInt();
        }

        for(int i = 0; i < m; i++){
            points[i] = scanner.nextInt();
        }

        int[] cnt = fastCountSegments(starts,ends, points);
        int res = 0;
        for(int x : cnt){
            res += x;
        }

        System.out.println(res);

    }

    public static int[] fastCountSegments(int[] starts, int[] ends, int[] points){
        int[] cnt = new int[points.length];
        Arrays.sort(starts);
        Arrays.sort(ends);
        for(int i = 0; i < points.length; i++) {
            int si = 0, ei = 0;
            while (si < starts.length && starts[si] <= points[i]) {
                si++;
            }

            while (ei < ends.length && ends[ei] < points[i]) {
                ei++;
            }
            cnt[i] = si - ei;
        }
        return cnt;
    }

    public static int[] naiveCountSegments(int[] starts, int[] ends, int[] points){
        int[] cnt = new int[points.length];
        for(int i = 0; i < points.length; i++){
            for(int j = 0; j < starts.length; j++){
                if(starts[j] <= points[i] && points[i] <= ends[j]){
                    cnt[i]++;
                }
            }
        }
        return cnt;
    }

    static class FastScanner{
        BufferedReader br;
        StringTokenizer st;

        public FastScanner(InputStream stream){
            try{
                br = new BufferedReader(new InputStreamReader(stream));
            } catch(Exception e){
                e.printStackTrace();
            }
        }

        String next(){
            while(st == null || !st.hasMoreTokens()){
                try{
                    st = new StringTokenizer(br.readLine());
                } catch (Exception e){
                    e.printStackTrace();
                }
            }

            return st.nextToken();
        }

        int nextInt(){
            return Integer.parseInt(next());
        }
    }
}
